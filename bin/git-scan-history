#!/bin/bash
###
#
USAGE="--run <collection script> [options] <range>"
LONG_USAGE=<<EOT
Runs a command for each commit in a range.  Stores the
results using `git notes` so you can push the results to other repositories,
and the results are kept around for resuming interrupted runs.

Originally designed for mining data from history, like complexity over time.

 <range> is a range of commits - see git-rev-list(1)
 Example ranges:
   HEAD~10..HEAD~5        # relative
   v1.0..v2.0             # tags
   cb13a59c5c..95ae35d3   # commit hashes
   origin/master..master  # branches

 <collection script> is run for every commit. For example:
   'cloc .'
   'echo \$commit_sha1'
   'du .'
 It is expected to act on the working tree and print results to stdout.

EOT
OPTIONS_SPEC="\
git-scan-history [options] --run=<collection script> <range>
--
 Available options are
h,help         Help text
v,verbose      Talk about everything
q,quiet        Talk about nothing
notes-ref=     Store results in a particular \`git notes\` namespace
run=           A command to collect statistics about the commit

"
OPTIONS_KEEPDASHDASH=
NONGIT_OK=
SUBDIRECTORY_OK=

# avoid silent failures:
# -e  trigger an error and exit on any command that fails
# -E  even in a function
set -eE

collection_script=

# the "git library" for shell scripts like this one
source "$(git --exec-path)/git-sh-setup"

# this script stores results in `git notes`
# so that the results can be cached, and pushed to other repositories
export GIT_NOTES_REF=${GIT_NOTES_REF:-refs/notes/scan-history}

function main() {
 local rev
 require_work_tree
 require_clean_work_tree
 set_reflog_action

 git update-ref ORIG_HEAD HEAD

 for rev in $(git rev-list "$@"); do
   if ! needs_stats_for_rev $rev; then
     say "Already collected stats for $rev, skipping..."
     continue
   fi
   collect_stats_for_rev $rev
 done

 say 'Finished, cleaning up...'
 cleanup
}

function cleanup() {
 git reset --hard ORIG_HEAD
 trap - EXIT
}

function needs_stats_for_rev() {
 local rev=$1

 ! git notes list $rev
} &> /dev/null
# it's a boolean check function, never needs output

function collect_stats_for_rev() {
   local rev=$1
   say "Collecting stats for $rev..."

   git reset --hard $rev
   git notes add --file=<(eval "$collection_script")
}

function on_error() {
  say 'Error, cleaning up...'
  cleanup
  exit 2
}

trap on_error ERR INT
trap cleanup EXIT

while [[ $# != 0 ]]; do
  case "$1" in
    --run)
      collection_script="$2"
      shift
      ;;
    --notes-ref)
      GIT_NOTES_REF="$2"
      shift
      ;;
    -v) #verbose
      GIT_QUIET=
      ;;
    -q) #quiet
      GIT_QUIET=t
      ;;
    --)
      shift
      break
      ;;
  esac
  shift
done

if [[ -z ${collection_script} ]]; then
  die "Please provide a command to run. For example:
    --run 'echo Commit \$commit_sha1 has \$(wc -l README) lines in the README'
  "
fi

main "$@"

