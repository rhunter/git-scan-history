#!/bin/bash
###
#
# USAGE
#
#   git-cloc-ruby-sql-notes <range>
#
# Counts the amount of Ruby code for each commit in a range.  Stores the
# results using `git notes` so you can push the results to other repositories,
# and the results are kept around for resuming interrupted runs.
#
#
# EXAMPLES
#
#   git-cloc-ruby-sql-notes --first-parent HEAD~100...
#
#
# BUGS
#
# Written in a textbox for email in a browser, so probably doesn't actually
# work.
#
#
# AUTHOR
#
# Rob Hunter <rhunter@thoughtworks.com> is the dang fool who started
# reconstructing some analysis he'd done with Flog in a browser email.
##
set -eE


# this script stores results in `git notes`
# so that the results can be cached, and pushed to other repositories
export GIT_NOTES_REF=${GIT_NOTES_REF:-refs/notes/sql-cloc}

function main() {
 local rev
 start_branch=$(git rev-parse --symbolic HEAD)

 for rev in $(git rev-list "$@"); do
   if needs_stats_for_rev $rev; then
     collect_stats_for_rev $rev
   fi
 done

 cleanup
}

function cleanup() {
 git checkout $start_branch
}

function needs_stats_for_rev() {
 local rev=$1

 ! git notes list $rev
} 2>&1 > /dev/null

function collect_stats_for_rev() {
   local rev=$1

   git checkout $rev
   cloc_project_id="commit $rev"
   sql_cloc_for_project "$cloc_project_id" | git notes add --file=-
}

function sql_cloc_for_project() {
 local project_name="$1"

 cloc --sql=- \
   --sql-append \
   --sql-project="$project_name" \
   --exclude-dir=vendor,tmp \
   --match-f '\.rb$' \
   .
}

function on_error() {
  echo 'Error, cleaning up...'
  cleanup
  exit 2
}

trap on_error ERR INT
main "$@"

