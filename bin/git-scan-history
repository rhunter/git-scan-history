#!/bin/bash
###
#
USAGE="<range>"
LONG_USAGE=<<EOT
Counts the amount of Ruby code for each commit in a range.  Stores the
results using `git notes` so you can push the results to other repositories,
and the results are kept around for resuming interrupted runs.


EXAMPLES

  git-cloc-ruby-sql-notes --first-parent HEAD~100...


BUGS

Written in a textbox for email in a browser, so probably doesn't actually
work.


AUTHOR

Rob Hunter <rhunter@thoughtworks.com> is the dang fool who started
reconstructing some analysis he'd done with Flog in a browser email.

EOT

# avoid silent failures:
# -e  trigger an error and exit on any command that fails
# -E  even in a function
set -eE


# the "git library" for shell scripts like this one
source "$(git --exec-path)/git-sh-setup"

# this script stores results in `git notes`
# so that the results can be cached, and pushed to other repositories
export GIT_NOTES_REF=${GIT_NOTES_REF:-refs/notes/sql-cloc}

function main() {
 local rev
 require_work_tree
 require_clean_work_tree
 set_reflog_action

 git update-ref ORIG_HEAD HEAD

 for rev in $(git rev-list "$@"); do
   if ! needs_stats_for_rev $rev; then
     say "Already collected stats for $rev, skipping..."
     continue
   fi
   collect_stats_for_rev $rev
 done

 say 'Finished, cleaning up...'
 cleanup
}

function cleanup() {
 git reset --hard ORIG_HEAD
}

function needs_stats_for_rev() {
 local rev=$1

 ! git notes list $rev
} &> /dev/null
# it's a boolean check function, never needs output

function collect_stats_for_rev() {
   local rev=$1
   say "Collecting stats for $rev..."

   git reset --hard $rev
   cloc_project_id="commit $rev"
   sql_cloc_for_project "$cloc_project_id" | git notes add --file=-
}

##
# actually do the collection.
# expected to act on the working tree, print results to stdout
#
# TODO: should almost certainly be user-supplied
function sql_cloc_for_project() {
 local project_name="$1"

 cloc --sql=- \
   --sql-append \
   --sql-project="$project_name" \
   --exclude-dir=vendor,tmp \
   --match-f '\.rb$' \
   .
}

function on_error() {
  say 'Error, cleaning up...'
  cleanup
  exit 2
}

trap on_error ERR INT
main "$@"

